# This workflow will deploy source code on Cloud Run when a commit is pushed to the "main" branch
#
# Overview:
#
# 1. Authenticate to Google Cloud
# 2. Deploy it to Cloud Run
#
# To configure this workflow:
#
# 1. Ensure the required Google Cloud APIs are enabled:
#
#    Cloud Run            run.googleapis.com
#    Cloud Build          cloudbuild.googleapis.com
#    Artifact Registry    artifactregistry.googleapis.com
#
# 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Ensure the required IAM permissions are granted
#
#    Cloud Run
#      roles/run.admin
#      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account)
#
#    Cloud Build
#      roles/cloudbuild.builds.editor
#
#    Cloud Storage
#      roles/storage.objectAdmin
#
#    Artifact Registry
#      roles/artifactregistry.admin     (project or repository level)
#
#    NOTE: You should always follow the principle of least privilege when assigning IAM roles
#
# 4. Create GitHub secrets for WIF_PROVIDER and WIF_SERVICE_ACCOUNT
#
# 5. Change the values for the SERVICE and REGION environment variables (below).
#
# For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run
#
# Further reading:
#   Cloud Run runtime service account   - https://cloud.google.com/run/docs/securing/service-identity
#   Cloud Run IAM permissions           - https://cloud.google.com/run/docs/deploying-source-code#permissions_required_to_deploy
#   Cloud Run builds from source        - https://cloud.google.com/run/docs/deploying-source-code
#   Principle of least privilege        - https://cloud.google.com/blog/products/identity-security/dont-get-pwned-practicing-the-principle-of-least-privilege

name: Initialize Cloud Run from Source
run-name: ${{ github.actor }} is initializing a Cloud Run service ðŸŽ‰

on:
  workflow_dispatch:

# on:
#   push:
#     branches: [ "main" ]

env:
  PROJECT_ID: arched-logic-390516 # TODO: update Google Cloud project id
  SERVICE: qwik-blog-service1 # TODO: update Cloud Run service name
  REGION: us-central1 # TODO: update Cloud Run service region

jobs:
  initialize:
    name: initialize
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: 'Setting up Node'
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 'Installing dependencies'
        run: npm ci

      - name: 'Verifying the signatures'
        run: |-
          npm i -g npm@latest
          npm audit signatures

      - name: 'Running Production Build'
        run: npm run build

    #   - name: Google Auth
    #     id: auth
    #     uses: 'google-github-actions/auth@v0'
    #     with:
    #       workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
    #       service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      # NOTE: Alternative option - authentication via credentials json
      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.SA_CREDS }}'

    #   # envsubst is replacing template variables and creating a YAML Service specification with the new image tag
    #   - name: Create Service declearation   
    #     run: |-
    #       export IMAGE="gcr.io/${{env.PROJECT_ID}}/${{env.SERVICE}}"
    #       export IMAGE="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}"
    #       export SERVICE="${{ env.SERVICE }}"
    #       envsubst < ./cloudrun/service.template.yaml > service.yaml

      # envsubst is replacing template variables and creating a YAML Service specification with the new image tag
    #   - name: Create Service declearation (Export Environment Variables)  
    #     run: |-
    #       export IMAGE="us-central1-docker.pkg.dev/arched-logic-390516/cloud-run-source-deploy/qwik-blog-service@sha256:ccb2bfe4eb251713505bfb8c29bdbf5dd2014f097b41240f2120cc57ef39d9b2"
    #       export SERVICE="${{ env.SERVICE }}"
    #       export XATA_API_KEY="${{ secrets.XATA_API_KEY }}"
    #       export XATA_BRANCH="${{ secrets.XATA_BRANCH }}"
    #       export AUTH_SECRET="${{ secrets.AUTH_SECRET }}"
    #       export GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}"
    #       export GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}"
    #       export APPLE_SECRET="${{ secrets.APPLE_SECRET }}"
    #       envsubst < ./cloudrun/service.template.yaml > service.yaml

    #   Deploy Cloud Run Service from the YAML Service specification
    #   - name: Deploy to Cloud Run
    #     id: deploy
    #     uses: google-github-actions/deploy-cloudrun@v2
    #     with:
    #       region: ${{ env.REGION }}
    #       metadata: service.yaml

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
      #   NOTE: If required, update to the appropriate source folder
          source: ./
          project_id: ${{ env.PROJECT_ID }}
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          no_traffic: true
          flags: '--allow-unauthenticated'
          env_vars: |
            XATA_API_KEY="${{ secrets.XATA_API_KEY }}"
            XATA_BRANCH="${{ secrets.XATA_BRANCH }}"
            AUTH_SECRET="${{ secrets.AUTH_SECRET }}"
            GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}"
            GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}"
            APPLE_SECRET="${{ secrets.APPLE_SECRET }}"

      # If required, use the Cloud Run url output in later steps
      - name: Show Output Deployment Output
        run: echo ${{ steps.deploy.outputs.url }}

      - name: Adjust Traffic
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          revision_traffic: 'LATEST=20'

      - name: Show Adjusted Traffic Output
        run: echo ${{ steps.deploy.outputs.url }}